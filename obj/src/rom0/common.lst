                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.2 #13350 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module common
                                      6 	.optsdcc -msm83
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _uitoa
                                     12 	.globl _strlen
                                     13 	.globl _strcat
                                     14 	.globl _memcpy
                                     15 	.globl _strcpy
                                     16 	.globl _set_win_tile_xy
                                     17 	.globl _set_bkg_tile_xy
                                     18 	.globl _set_bkg_tiles
                                     19 	.globl _set_bkg_data
                                     20 	.globl _BLANK_SCREEN_MAP
                                     21 	.globl _BANK_BACKUP
                                     22 	.globl _RENDER_TARGET
                                     23 	.globl _MUSIC_TOGGLE
                                     24 	.globl _ANIMATION_TICK_SPEED
                                     25 	.globl _ANIMATION_TICK
                                     26 	.globl _FRAME_COUNTER
                                     27 	.globl _TEMP_VAR_F
                                     28 	.globl _TEMP_VAR_E
                                     29 	.globl _TEMP_VAR_D
                                     30 	.globl _TEMP_VAR_C
                                     31 	.globl _TEMP_VAR_B
                                     32 	.globl _TEMP_VAR_A
                                     33 	.globl _RNG_8
                                     34 	.globl _CURSOR_INDEX_PREV
                                     35 	.globl _CURSOR_INDEX
                                     36 	.globl _LOOP_LIMIT
                                     37 	.globl _LOOP_INDEX
                                     38 	.globl _JOYPAD_PREVIOUS
                                     39 	.globl _JOYPAD_CURRENT
                                     40 	.globl _SCENE_SUBMODE_PREV
                                     41 	.globl _SCENE_SUBMODE
                                     42 	.globl _PREVIOUS_GAME_STATE
                                     43 	.globl _GAME_STATE
                                     44 	.globl _ITOA_STRING
                                     45 	.globl _VAR_SFX_DATA
                                     46 	.globl _VAR_MUSIC_DATA
                                     47 	.globl _TEMP_STRING
                                     48 	.globl _RNG_SEED
                                     49 	.globl _BLANK_SCREEN_TILES
                                     50 	.globl _drawTextBkg
                                     51 	.globl _makeLeadingZeroString
                                     52 	.globl _drawWindowBorder
                                     53 	.globl _set_banked_data
                                     54 	.globl _cpy_banked_data
                                     55 	.globl _set_banked_tiles
                                     56 	.globl _set_based_banked_tiles
                                     57 ;--------------------------------------------------------
                                     58 ; special function registers
                                     59 ;--------------------------------------------------------
                                     60 ;--------------------------------------------------------
                                     61 ; ram data
                                     62 ;--------------------------------------------------------
                                     63 	.area _DATA
                           000000    64 G$RNG_SEED$0_0$0==.
      000000                         65 _RNG_SEED::
      000000                         66 	.ds 2
                           000002    67 G$TEMP_STRING$0_0$0==.
      000002                         68 _TEMP_STRING::
      000002                         69 	.ds 16
                           000012    70 G$VAR_MUSIC_DATA$0_0$0==.
      000012                         71 _VAR_MUSIC_DATA::
      000012                         72 	.ds 17
                           000023    73 G$VAR_SFX_DATA$0_0$0==.
      000023                         74 _VAR_SFX_DATA::
      000023                         75 	.ds 18
                           000035    76 G$ITOA_STRING$0_0$0==.
      000035                         77 _ITOA_STRING::
      000035                         78 	.ds 4
                                     79 ;--------------------------------------------------------
                                     80 ; ram data
                                     81 ;--------------------------------------------------------
                                     82 	.area _INITIALIZED
                           000000    83 G$GAME_STATE$0_0$0==.
      000000                         84 _GAME_STATE::
      000000                         85 	.ds 1
                           000001    86 G$PREVIOUS_GAME_STATE$0_0$0==.
      000001                         87 _PREVIOUS_GAME_STATE::
      000001                         88 	.ds 1
                           000002    89 G$SCENE_SUBMODE$0_0$0==.
      000002                         90 _SCENE_SUBMODE::
      000002                         91 	.ds 1
                           000003    92 G$SCENE_SUBMODE_PREV$0_0$0==.
      000003                         93 _SCENE_SUBMODE_PREV::
      000003                         94 	.ds 1
                           000004    95 G$JOYPAD_CURRENT$0_0$0==.
      000004                         96 _JOYPAD_CURRENT::
      000004                         97 	.ds 1
                           000005    98 G$JOYPAD_PREVIOUS$0_0$0==.
      000005                         99 _JOYPAD_PREVIOUS::
      000005                        100 	.ds 1
                           000006   101 G$LOOP_INDEX$0_0$0==.
      000006                        102 _LOOP_INDEX::
      000006                        103 	.ds 1
                           000007   104 G$LOOP_LIMIT$0_0$0==.
      000007                        105 _LOOP_LIMIT::
      000007                        106 	.ds 1
                           000008   107 G$CURSOR_INDEX$0_0$0==.
      000008                        108 _CURSOR_INDEX::
      000008                        109 	.ds 1
                           000009   110 G$CURSOR_INDEX_PREV$0_0$0==.
      000009                        111 _CURSOR_INDEX_PREV::
      000009                        112 	.ds 1
                           00000A   113 G$RNG_8$0_0$0==.
      00000A                        114 _RNG_8::
      00000A                        115 	.ds 1
                           00000B   116 G$TEMP_VAR_A$0_0$0==.
      00000B                        117 _TEMP_VAR_A::
      00000B                        118 	.ds 1
                           00000C   119 G$TEMP_VAR_B$0_0$0==.
      00000C                        120 _TEMP_VAR_B::
      00000C                        121 	.ds 1
                           00000D   122 G$TEMP_VAR_C$0_0$0==.
      00000D                        123 _TEMP_VAR_C::
      00000D                        124 	.ds 1
                           00000E   125 G$TEMP_VAR_D$0_0$0==.
      00000E                        126 _TEMP_VAR_D::
      00000E                        127 	.ds 1
                           00000F   128 G$TEMP_VAR_E$0_0$0==.
      00000F                        129 _TEMP_VAR_E::
      00000F                        130 	.ds 1
                           000010   131 G$TEMP_VAR_F$0_0$0==.
      000010                        132 _TEMP_VAR_F::
      000010                        133 	.ds 1
                           000011   134 G$FRAME_COUNTER$0_0$0==.
      000011                        135 _FRAME_COUNTER::
      000011                        136 	.ds 1
                           000012   137 G$ANIMATION_TICK$0_0$0==.
      000012                        138 _ANIMATION_TICK::
      000012                        139 	.ds 1
                           000013   140 G$ANIMATION_TICK_SPEED$0_0$0==.
      000013                        141 _ANIMATION_TICK_SPEED::
      000013                        142 	.ds 1
                           000014   143 G$MUSIC_TOGGLE$0_0$0==.
      000014                        144 _MUSIC_TOGGLE::
      000014                        145 	.ds 1
                           000015   146 G$RENDER_TARGET$0_0$0==.
      000015                        147 _RENDER_TARGET::
      000015                        148 	.ds 1
                           000016   149 G$BANK_BACKUP$0_0$0==.
      000016                        150 _BANK_BACKUP::
      000016                        151 	.ds 1
                           000017   152 G$BLANK_SCREEN_MAP$0_0$0==.
      000017                        153 _BLANK_SCREEN_MAP::
      000017                        154 	.ds 360
                                    155 ;--------------------------------------------------------
                                    156 ; absolute external ram data
                                    157 ;--------------------------------------------------------
                                    158 	.area _DABS (ABS)
                                    159 ;--------------------------------------------------------
                                    160 ; global & static initialisations
                                    161 ;--------------------------------------------------------
                                    162 	.area _HOME
                                    163 	.area _GSINIT
                                    164 	.area _GSFINAL
                                    165 	.area _GSINIT
                                    166 ;--------------------------------------------------------
                                    167 ; Home
                                    168 ;--------------------------------------------------------
                                    169 	.area _HOME
                           000000   170 	G$set_banked_data$0$0	= .
                                    171 	.globl	G$set_banked_data$0$0
                           000000   172 	C$common.c$136$1_0$169	= .
                                    173 	.globl	C$common.c$136$1_0$169
                                    174 ;src/rom0/common.c:136: void set_banked_data(uint8_t first_tile, uint8_t nb_tiles, const uint8_t *data, uint8_t bank) NONBANKED {
                                    175 ;	---------------------------------
                                    176 ; Function set_banked_data
                                    177 ; ---------------------------------
      000000                        178 _set_banked_data::
      000000 3B               [ 8]  179 	dec	sp
      000001 47               [ 4]  180 	ld	b, a
      000002 F8 00            [12]  181 	ldhl	sp,	#0
      000004 73               [ 8]  182 	ld	(hl), e
                           000005   183 	C$common.c$137$2_0$169	= .
                                    184 	.globl	C$common.c$137$2_0$169
                                    185 ;src/rom0/common.c:137: uint8_t _save = _current_bank;
      000005 F0r00            [12]  186 	ldh	a, (__current_bank + 0)
      000007 4F               [ 4]  187 	ld	c, a
                           000008   188 	C$common.c$138$1_0$169	= .
                                    189 	.globl	C$common.c$138$1_0$169
                                    190 ;src/rom0/common.c:138: SWITCH_ROM(bank);
      000008 F8 05            [12]  191 	ldhl	sp,	#5
      00000A 7E               [ 8]  192 	ld	a, (hl)
      00000B E0r00            [12]  193 	ldh	(__current_bank + 0), a
      00000D 11 00 20         [12]  194 	ld	de, #0x2000
                           000010   195 	C$common.c$139$1_0$169	= .
                                    196 	.globl	C$common.c$139$1_0$169
                                    197 ;src/rom0/common.c:139: set_bkg_data(first_tile, nb_tiles, data);
      000010 3A               [ 8]  198 	ld	a, (hl-)
      000011 2B               [ 8]  199 	dec	hl
      000012 12               [ 8]  200 	ld	(de), a
      000013 2A               [ 8]  201 	ld	a, (hl+)
      000014 5F               [ 4]  202 	ld	e, a
      000015 56               [ 8]  203 	ld	d, (hl)
      000016 D5               [16]  204 	push	de
      000017 F8 02            [12]  205 	ldhl	sp,	#2
      000019 7E               [ 8]  206 	ld	a, (hl)
      00001A F5               [16]  207 	push	af
      00001B 33               [ 8]  208 	inc	sp
      00001C C5               [16]  209 	push	bc
      00001D 33               [ 8]  210 	inc	sp
      00001E CDr00r00         [24]  211 	call	_set_bkg_data
      000021 E8 04            [16]  212 	add	sp, #4
                           000023   213 	C$common.c$140$1_0$169	= .
                                    214 	.globl	C$common.c$140$1_0$169
                                    215 ;src/rom0/common.c:140: SWITCH_ROM(_save);
      000023 79               [ 4]  216 	ld	a, c
      000024 E0r00            [12]  217 	ldh	(__current_bank + 0), a
      000026 21 00 20         [12]  218 	ld	hl, #0x2000
      000029 71               [ 8]  219 	ld	(hl), c
                           00002A   220 	C$common.c$141$1_0$169	= .
                                    221 	.globl	C$common.c$141$1_0$169
                                    222 ;src/rom0/common.c:141: }
      00002A 33               [ 8]  223 	inc	sp
      00002B E1               [12]  224 	pop	hl
      00002C E8 03            [16]  225 	add	sp, #3
      00002E E9               [ 4]  226 	jp	(hl)
                           00002F   227 	G$cpy_banked_data$0$0	= .
                                    228 	.globl	G$cpy_banked_data$0$0
                           00002F   229 	C$common.c$150$1_0$171	= .
                                    230 	.globl	C$common.c$150$1_0$171
                                    231 ;src/rom0/common.c:150: void cpy_banked_data(void * dest, const void * src, size_t len, uint8_t bank) NONBANKED {
                                    232 ;	---------------------------------
                                    233 ; Function cpy_banked_data
                                    234 ; ---------------------------------
      00002F                        235 _cpy_banked_data::
      00002F E8 FD            [16]  236 	add	sp, #-3
      000031 F8 01            [12]  237 	ldhl	sp,	#1
      000033 73               [ 8]  238 	ld	(hl), e
      000034 23               [ 8]  239 	inc	hl
      000035 72               [ 8]  240 	ld	(hl), d
                           000036   241 	C$common.c$151$2_0$171	= .
                                    242 	.globl	C$common.c$151$2_0$171
                                    243 ;src/rom0/common.c:151: uint8_t _save = _current_bank;
      000036 2B               [ 8]  244 	dec	hl
      000037 2B               [ 8]  245 	dec	hl
      000038 F0r00            [12]  246 	ldh	a, (__current_bank + 0)
      00003A 77               [ 8]  247 	ld	(hl), a
                           00003B   248 	C$common.c$152$1_0$171	= .
                                    249 	.globl	C$common.c$152$1_0$171
                                    250 ;src/rom0/common.c:152: SWITCH_ROM(bank);
      00003B F8 07            [12]  251 	ldhl	sp,	#7
      00003D 7E               [ 8]  252 	ld	a, (hl)
      00003E E0r00            [12]  253 	ldh	(__current_bank + 0), a
      000040 11 00 20         [12]  254 	ld	de, #0x2000
                           000043   255 	C$common.c$153$1_0$171	= .
                                    256 	.globl	C$common.c$153$1_0$171
                                    257 ;src/rom0/common.c:153: memcpy(dest, src, len);
      000043 3A               [ 8]  258 	ld	a, (hl-)
      000044 2B               [ 8]  259 	dec	hl
      000045 12               [ 8]  260 	ld	(de), a
      000046 2A               [ 8]  261 	ld	a, (hl+)
      000047 5F               [ 4]  262 	ld	e, a
      000048 56               [ 8]  263 	ld	d, (hl)
      000049 D5               [16]  264 	push	de
      00004A F8 03            [12]  265 	ldhl	sp,	#3
      00004C 2A               [ 8]  266 	ld	a, (hl+)
      00004D 5F               [ 4]  267 	ld	e, a
      00004E 56               [ 8]  268 	ld	d, (hl)
      00004F CDr00r00         [24]  269 	call	_memcpy
                           000052   270 	C$common.c$154$1_0$171	= .
                                    271 	.globl	C$common.c$154$1_0$171
                                    272 ;src/rom0/common.c:154: SWITCH_ROM(_save);
      000052 F8 00            [12]  273 	ldhl	sp,	#0
      000054 7E               [ 8]  274 	ld	a, (hl)
      000055 E0r00            [12]  275 	ldh	(__current_bank + 0), a
      000057 11 00 20         [12]  276 	ld	de, #0x2000
      00005A 7E               [ 8]  277 	ld	a, (hl)
      00005B 12               [ 8]  278 	ld	(de), a
                           00005C   279 	C$common.c$155$1_0$171	= .
                                    280 	.globl	C$common.c$155$1_0$171
                                    281 ;src/rom0/common.c:155: }
      00005C E8 03            [16]  282 	add	sp, #3
      00005E E1               [12]  283 	pop	hl
      00005F E8 03            [16]  284 	add	sp, #3
      000061 E9               [ 4]  285 	jp	(hl)
                           000062   286 	G$set_banked_tiles$0$0	= .
                                    287 	.globl	G$set_banked_tiles$0$0
                           000062   288 	C$common.c$166$1_0$173	= .
                                    289 	.globl	C$common.c$166$1_0$173
                                    290 ;src/rom0/common.c:166: void set_banked_tiles(uint8_t x_pos, uint8_t y_pos, uint8_t width, uint8_t height, const uint8_t * tile_data, uint8_t bank) NONBANKED {
                                    291 ;	---------------------------------
                                    292 ; Function set_banked_tiles
                                    293 ; ---------------------------------
      000062                        294 _set_banked_tiles::
      000062 3B               [ 8]  295 	dec	sp
      000063 47               [ 4]  296 	ld	b, a
      000064 F8 00            [12]  297 	ldhl	sp,	#0
      000066 73               [ 8]  298 	ld	(hl), e
                           000067   299 	C$common.c$167$2_0$173	= .
                                    300 	.globl	C$common.c$167$2_0$173
                                    301 ;src/rom0/common.c:167: uint8_t _save = _current_bank;
      000067 F0r00            [12]  302 	ldh	a, (__current_bank + 0)
      000069 4F               [ 4]  303 	ld	c, a
                           00006A   304 	C$common.c$168$1_0$173	= .
                                    305 	.globl	C$common.c$168$1_0$173
                                    306 ;src/rom0/common.c:168: SWITCH_ROM(bank);
      00006A F8 07            [12]  307 	ldhl	sp,	#7
      00006C 7E               [ 8]  308 	ld	a, (hl)
      00006D E0r00            [12]  309 	ldh	(__current_bank + 0), a
      00006F 11 00 20         [12]  310 	ld	de, #0x2000
                           000072   311 	C$common.c$169$1_0$173	= .
                                    312 	.globl	C$common.c$169$1_0$173
                                    313 ;src/rom0/common.c:169: set_bkg_tiles(x_pos, y_pos, width, height, tile_data);
      000072 3A               [ 8]  314 	ld	a, (hl-)
      000073 2B               [ 8]  315 	dec	hl
      000074 12               [ 8]  316 	ld	(de), a
      000075 2A               [ 8]  317 	ld	a, (hl+)
      000076 5F               [ 4]  318 	ld	e, a
      000077 3A               [ 8]  319 	ld	a, (hl-)
      000078 2B               [ 8]  320 	dec	hl
      000079 57               [ 4]  321 	ld	d, a
      00007A D5               [16]  322 	push	de
      00007B 3A               [ 8]  323 	ld	a, (hl-)
      00007C 57               [ 4]  324 	ld	d, a
      00007D 5E               [ 8]  325 	ld	e, (hl)
      00007E D5               [16]  326 	push	de
      00007F F8 04            [12]  327 	ldhl	sp,	#4
      000081 7E               [ 8]  328 	ld	a, (hl)
      000082 F5               [16]  329 	push	af
      000083 33               [ 8]  330 	inc	sp
      000084 C5               [16]  331 	push	bc
      000085 33               [ 8]  332 	inc	sp
      000086 CDr00r00         [24]  333 	call	_set_bkg_tiles
      000089 E8 06            [16]  334 	add	sp, #6
                           00008B   335 	C$common.c$170$1_0$173	= .
                                    336 	.globl	C$common.c$170$1_0$173
                                    337 ;src/rom0/common.c:170: SWITCH_ROM(_save);
      00008B 79               [ 4]  338 	ld	a, c
      00008C E0r00            [12]  339 	ldh	(__current_bank + 0), a
      00008E 21 00 20         [12]  340 	ld	hl, #0x2000
      000091 71               [ 8]  341 	ld	(hl), c
                           000092   342 	C$common.c$171$1_0$173	= .
                                    343 	.globl	C$common.c$171$1_0$173
                                    344 ;src/rom0/common.c:171: }
      000092 33               [ 8]  345 	inc	sp
      000093 E1               [12]  346 	pop	hl
      000094 E8 05            [16]  347 	add	sp, #5
      000096 E9               [ 4]  348 	jp	(hl)
                           000097   349 	G$set_based_banked_tiles$0$0	= .
                                    350 	.globl	G$set_based_banked_tiles$0$0
                           000097   351 	C$common.c$183$1_0$175	= .
                                    352 	.globl	C$common.c$183$1_0$175
                                    353 ;src/rom0/common.c:183: void set_based_banked_tiles(uint8_t x_pos, uint8_t y_pos, uint8_t width, uint8_t height, const uint8_t * tile_data, uint8_t bank, uint8_t base_tile) NONBANKED {
                                    354 ;	---------------------------------
                                    355 ; Function set_based_banked_tiles
                                    356 ; ---------------------------------
      000097                        357 _set_based_banked_tiles::
      000097 3B               [ 8]  358 	dec	sp
      000098 3B               [ 8]  359 	dec	sp
      000099 F8 01            [12]  360 	ldhl	sp,	#1
      00009B 32               [ 8]  361 	ld	(hl-), a
      00009C 73               [ 8]  362 	ld	(hl), e
                           00009D   363 	C$common.c$184$2_0$175	= .
                                    364 	.globl	C$common.c$184$2_0$175
                                    365 ;src/rom0/common.c:184: uint8_t _save = _current_bank;
      00009D F0r00            [12]  366 	ldh	a, (__current_bank + 0)
      00009F 4F               [ 4]  367 	ld	c, a
                           0000A0   368 	C$common.c$185$1_0$175	= .
                                    369 	.globl	C$common.c$185$1_0$175
                                    370 ;src/rom0/common.c:185: SWITCH_ROM(bank);
      0000A0 F8 08            [12]  371 	ldhl	sp,	#8
      0000A2 7E               [ 8]  372 	ld	a, (hl)
      0000A3 E0r00            [12]  373 	ldh	(__current_bank + 0), a
      0000A5 11 00 20         [12]  374 	ld	de, #0x2000
                                    375 ;src/rom0/common.c:186: set_bkg_based_tiles(x_pos, y_pos, width, height, tile_data, base_tile);
      0000A8 2A               [ 8]  376 	ld	a, (hl+)
      0000A9 12               [ 8]  377 	ld	(de), a
      0000AA 7E               [ 8]  378 	ld	a, (hl)
      0000AB EAr00r00         [16]  379 	ld	(#__map_tile_offset),a
      0000AE F8 06            [12]  380 	ldhl	sp,	#6
      0000B0 2A               [ 8]  381 	ld	a, (hl+)
      0000B1 5F               [ 4]  382 	ld	e, a
      0000B2 3A               [ 8]  383 	ld	a, (hl-)
      0000B3 2B               [ 8]  384 	dec	hl
      0000B4 57               [ 4]  385 	ld	d, a
      0000B5 3A               [ 8]  386 	ld	a, (hl-)
      0000B6 47               [ 4]  387 	ld	b, a
      0000B7 7E               [ 8]  388 	ld	a, (hl)
                                    389 ;/home/mreichelt/workspace/gameboy_development/gbdk/include/gb/gb.h:1072: set_bkg_tiles(x, y, w, h, tiles);
      0000B8 D5               [16]  390 	push	de
      0000B9 C5               [16]  391 	push	bc
      0000BA 33               [ 8]  392 	inc	sp
      0000BB F5               [16]  393 	push	af
      0000BC 33               [ 8]  394 	inc	sp
      0000BD F8 04            [12]  395 	ldhl	sp,	#4
      0000BF 2A               [ 8]  396 	ld	a, (hl+)
      0000C0 57               [ 4]  397 	ld	d, a
      0000C1 5E               [ 8]  398 	ld	e, (hl)
      0000C2 D5               [16]  399 	push	de
      0000C3 CDr00r00         [24]  400 	call	_set_bkg_tiles
      0000C6 E8 06            [16]  401 	add	sp, #6
                                    402 ;/home/mreichelt/workspace/gameboy_development/gbdk/include/gb/gb.h:1073: _map_tile_offset = 0;
      0000C8 21r00r00         [12]  403 	ld	hl, #__map_tile_offset
      0000CB 36 00            [12]  404 	ld	(hl), #0x00
                           0000CD   405 	C$common.c$187$1_0$175	= .
                                    406 	.globl	C$common.c$187$1_0$175
                                    407 ;src/rom0/common.c:187: SWITCH_ROM(_save);
      0000CD 79               [ 4]  408 	ld	a, c
      0000CE E0r00            [12]  409 	ldh	(__current_bank + 0), a
      0000D0 21 00 20         [12]  410 	ld	hl, #0x2000
      0000D3 71               [ 8]  411 	ld	(hl), c
                           0000D4   412 	C$common.c$188$1_0$175	= .
                                    413 	.globl	C$common.c$188$1_0$175
                                    414 ;src/rom0/common.c:188: }
      0000D4 33               [ 8]  415 	inc	sp
      0000D5 33               [ 8]  416 	inc	sp
      0000D6 E1               [12]  417 	pop	hl
      0000D7 E8 06            [16]  418 	add	sp, #6
      0000D9 E9               [ 4]  419 	jp	(hl)
                                    420 	.area _HOME
                                    421 ;--------------------------------------------------------
                                    422 ; code
                                    423 ;--------------------------------------------------------
                                    424 	.area _CODE_0
                           000000   425 	G$drawTextBkg$0$0	= .
                                    426 	.globl	G$drawTextBkg$0$0
                           000000   427 	C$common.c$56$0_0$153	= .
                                    428 	.globl	C$common.c$56$0_0$153
                                    429 ;src/rom0/common.c:56: void drawTextBkg(uint8_t x, uint8_t y, unsigned char* const text)
                                    430 ;	---------------------------------
                                    431 ; Function drawTextBkg
                                    432 ; ---------------------------------
      000000                        433 _drawTextBkg::
      000000 4F               [ 4]  434 	ld	c, a
      000001 43               [ 4]  435 	ld	b, e
                           000002   436 	C$common.c$58$1_0$153	= .
                                    437 	.globl	C$common.c$58$1_0$153
                                    438 ;src/rom0/common.c:58: set_bkg_tiles(x, y, strlen((char *)text), 1, text);
      000002 F8 02            [12]  439 	ldhl	sp,	#2
      000004 2A               [ 8]  440 	ld	a, (hl+)
      000005 5F               [ 4]  441 	ld	e, a
      000006 56               [ 8]  442 	ld	d, (hl)
      000007 D5               [16]  443 	push	de
      000008 CDr00r00         [24]  444 	call	_strlen
      00000B E1               [12]  445 	pop	hl
      00000C 7B               [ 4]  446 	ld	a, e
      00000D F8 02            [12]  447 	ldhl	sp,	#2
      00000F 5E               [ 8]  448 	ld	e, (hl)
      000010 23               [ 8]  449 	inc	hl
      000011 56               [ 8]  450 	ld	d, (hl)
      000012 D5               [16]  451 	push	de
      000013 26 01            [ 8]  452 	ld	h, #0x01
                                    453 ;	spillPairReg hl
                                    454 ;	spillPairReg hl
      000015 E5               [16]  455 	push	hl
      000016 33               [ 8]  456 	inc	sp
      000017 F5               [16]  457 	push	af
      000018 33               [ 8]  458 	inc	sp
      000019 C5               [16]  459 	push	bc
      00001A 33               [ 8]  460 	inc	sp
      00001B 79               [ 4]  461 	ld	a, c
      00001C F5               [16]  462 	push	af
      00001D 33               [ 8]  463 	inc	sp
      00001E CDr00r00         [24]  464 	call	_set_bkg_tiles
      000021 E8 06            [16]  465 	add	sp, #6
                           000023   466 	C$common.c$59$1_0$153	= .
                                    467 	.globl	C$common.c$59$1_0$153
                                    468 ;src/rom0/common.c:59: }
      000023 E1               [12]  469 	pop	hl
      000024 F1               [12]  470 	pop	af
      000025 E9               [ 4]  471 	jp	(hl)
                           000026   472 G$BLANK_SCREEN_TILES$0_0$0 == .
      000026                        473 _BLANK_SCREEN_TILES:
      000026 00                     474 	.db #0x00	; 0
      000027 00                     475 	.db #0x00	; 0
      000028 00                     476 	.db #0x00	; 0
      000029 00                     477 	.db #0x00	; 0
      00002A 00                     478 	.db #0x00	; 0
      00002B 00                     479 	.db #0x00	; 0
      00002C 00                     480 	.db #0x00	; 0
      00002D 00                     481 	.db #0x00	; 0
      00002E 00                     482 	.db #0x00	; 0
      00002F 00                     483 	.db #0x00	; 0
      000030 00                     484 	.db #0x00	; 0
      000031 00                     485 	.db #0x00	; 0
      000032 00                     486 	.db #0x00	; 0
      000033 00                     487 	.db #0x00	; 0
      000034 00                     488 	.db #0x00	; 0
      000035 00                     489 	.db #0x00	; 0
      000036 00                     490 	.db #0x00	; 0
      000037 00                     491 	.db #0x00	; 0
      000038 00                     492 	.db #0x00	; 0
      000039 00                     493 	.db #0x00	; 0
      00003A 00                     494 	.db #0x00	; 0
      00003B 00                     495 	.db #0x00	; 0
      00003C 00                     496 	.db #0x00	; 0
      00003D 00                     497 	.db #0x00	; 0
      00003E 00                     498 	.db #0x00	; 0
      00003F 00                     499 	.db #0x00	; 0
      000040 00                     500 	.db #0x00	; 0
      000041 00                     501 	.db #0x00	; 0
      000042 00                     502 	.db #0x00	; 0
      000043 00                     503 	.db #0x00	; 0
      000044 00                     504 	.db #0x00	; 0
      000045 00                     505 	.db #0x00	; 0
      000046 00                     506 	.db #0x00	; 0
      000047 00                     507 	.db #0x00	; 0
      000048 00                     508 	.db #0x00	; 0
      000049 00                     509 	.db #0x00	; 0
      00004A 00                     510 	.db #0x00	; 0
      00004B 00                     511 	.db #0x00	; 0
      00004C 00                     512 	.db #0x00	; 0
      00004D 00                     513 	.db #0x00	; 0
      00004E 00                     514 	.db #0x00	; 0
      00004F 00                     515 	.db #0x00	; 0
      000050 00                     516 	.db #0x00	; 0
      000051 00                     517 	.db #0x00	; 0
      000052 00                     518 	.db #0x00	; 0
      000053 00                     519 	.db #0x00	; 0
      000054 00                     520 	.db #0x00	; 0
      000055 00                     521 	.db #0x00	; 0
      000056 00                     522 	.db #0x00	; 0
      000057 00                     523 	.db #0x00	; 0
      000058 00                     524 	.db #0x00	; 0
      000059 00                     525 	.db #0x00	; 0
      00005A 00                     526 	.db #0x00	; 0
      00005B 00                     527 	.db #0x00	; 0
      00005C 00                     528 	.db #0x00	; 0
      00005D 00                     529 	.db #0x00	; 0
      00005E 00                     530 	.db #0x00	; 0
      00005F 00                     531 	.db #0x00	; 0
      000060 00                     532 	.db #0x00	; 0
      000061 00                     533 	.db #0x00	; 0
      000062 00                     534 	.db #0x00	; 0
      000063 00                     535 	.db #0x00	; 0
      000064 00                     536 	.db #0x00	; 0
      000065 00                     537 	.db #0x00	; 0
      000066 00                     538 	.db #0x00	; 0
      000067 00                     539 	.db #0x00	; 0
      000068 00                     540 	.db #0x00	; 0
      000069 00                     541 	.db #0x00	; 0
      00006A 00                     542 	.db #0x00	; 0
      00006B 00                     543 	.db #0x00	; 0
      00006C 00                     544 	.db #0x00	; 0
      00006D 00                     545 	.db #0x00	; 0
      00006E 00                     546 	.db #0x00	; 0
      00006F 00                     547 	.db #0x00	; 0
      000070 00                     548 	.db #0x00	; 0
      000071 00                     549 	.db #0x00	; 0
      000072 00                     550 	.db #0x00	; 0
      000073 00                     551 	.db #0x00	; 0
      000074 00                     552 	.db #0x00	; 0
      000075 00                     553 	.db #0x00	; 0
      000076 00                     554 	.db #0x00	; 0
      000077 00                     555 	.db #0x00	; 0
      000078 00                     556 	.db #0x00	; 0
      000079 00                     557 	.db #0x00	; 0
      00007A 00                     558 	.db #0x00	; 0
      00007B 00                     559 	.db #0x00	; 0
      00007C 00                     560 	.db #0x00	; 0
      00007D 00                     561 	.db #0x00	; 0
      00007E 00                     562 	.db #0x00	; 0
      00007F 00                     563 	.db #0x00	; 0
      000080 00                     564 	.db #0x00	; 0
      000081 00                     565 	.db #0x00	; 0
      000082 00                     566 	.db #0x00	; 0
      000083 00                     567 	.db #0x00	; 0
      000084 00                     568 	.db #0x00	; 0
      000085 00                     569 	.db #0x00	; 0
      000086 00                     570 	.db #0x00	; 0
      000087 00                     571 	.db #0x00	; 0
      000088 00                     572 	.db #0x00	; 0
      000089 00                     573 	.db #0x00	; 0
      00008A 00                     574 	.db #0x00	; 0
      00008B 00                     575 	.db #0x00	; 0
      00008C 00                     576 	.db #0x00	; 0
      00008D 00                     577 	.db #0x00	; 0
      00008E 00                     578 	.db #0x00	; 0
      00008F 00                     579 	.db #0x00	; 0
      000090 00                     580 	.db #0x00	; 0
      000091 00                     581 	.db #0x00	; 0
      000092 00                     582 	.db #0x00	; 0
      000093 00                     583 	.db #0x00	; 0
      000094 00                     584 	.db #0x00	; 0
      000095 00                     585 	.db #0x00	; 0
      000096 00                     586 	.db #0x00	; 0
      000097 00                     587 	.db #0x00	; 0
      000098 00                     588 	.db #0x00	; 0
      000099 00                     589 	.db #0x00	; 0
      00009A 00                     590 	.db #0x00	; 0
      00009B 00                     591 	.db #0x00	; 0
      00009C 00                     592 	.db #0x00	; 0
      00009D 00                     593 	.db #0x00	; 0
      00009E 00                     594 	.db #0x00	; 0
      00009F 00                     595 	.db #0x00	; 0
      0000A0 00                     596 	.db #0x00	; 0
      0000A1 00                     597 	.db #0x00	; 0
      0000A2 00                     598 	.db #0x00	; 0
      0000A3 00                     599 	.db #0x00	; 0
      0000A4 00                     600 	.db #0x00	; 0
      0000A5 00                     601 	.db #0x00	; 0
      0000A6 00                     602 	.db #0x00	; 0
      0000A7 00                     603 	.db #0x00	; 0
      0000A8 00                     604 	.db #0x00	; 0
      0000A9 00                     605 	.db #0x00	; 0
      0000AA 00                     606 	.db #0x00	; 0
      0000AB 00                     607 	.db #0x00	; 0
      0000AC 00                     608 	.db #0x00	; 0
      0000AD 00                     609 	.db #0x00	; 0
      0000AE 00                     610 	.db #0x00	; 0
      0000AF 00                     611 	.db #0x00	; 0
      0000B0 00                     612 	.db #0x00	; 0
      0000B1 00                     613 	.db #0x00	; 0
      0000B2 00                     614 	.db #0x00	; 0
      0000B3 00                     615 	.db #0x00	; 0
      0000B4 00                     616 	.db #0x00	; 0
      0000B5 00                     617 	.db #0x00	; 0
      0000B6 00                     618 	.db #0x00	; 0
      0000B7 00                     619 	.db #0x00	; 0
      0000B8 00                     620 	.db #0x00	; 0
      0000B9 00                     621 	.db #0x00	; 0
      0000BA 00                     622 	.db #0x00	; 0
      0000BB 00                     623 	.db #0x00	; 0
      0000BC 00                     624 	.db #0x00	; 0
      0000BD 00                     625 	.db #0x00	; 0
      0000BE 00                     626 	.db #0x00	; 0
      0000BF 00                     627 	.db #0x00	; 0
      0000C0 00                     628 	.db #0x00	; 0
      0000C1 00                     629 	.db #0x00	; 0
      0000C2 00                     630 	.db #0x00	; 0
      0000C3 00                     631 	.db #0x00	; 0
      0000C4 00                     632 	.db #0x00	; 0
      0000C5 00                     633 	.db #0x00	; 0
      0000C6 00                     634 	.db #0x00	; 0
      0000C7 00                     635 	.db #0x00	; 0
      0000C8 00                     636 	.db #0x00	; 0
      0000C9 00                     637 	.db #0x00	; 0
      0000CA 00                     638 	.db #0x00	; 0
      0000CB 00                     639 	.db #0x00	; 0
      0000CC 00                     640 	.db #0x00	; 0
      0000CD 00                     641 	.db #0x00	; 0
      0000CE 00                     642 	.db #0x00	; 0
      0000CF 00                     643 	.db #0x00	; 0
      0000D0 00                     644 	.db #0x00	; 0
      0000D1 00                     645 	.db #0x00	; 0
      0000D2 00                     646 	.db #0x00	; 0
      0000D3 00                     647 	.db #0x00	; 0
      0000D4 00                     648 	.db #0x00	; 0
      0000D5 00                     649 	.db #0x00	; 0
      0000D6 00                     650 	.db #0x00	; 0
      0000D7 00                     651 	.db #0x00	; 0
      0000D8 00                     652 	.db #0x00	; 0
      0000D9 00                     653 	.db #0x00	; 0
      0000DA 00                     654 	.db #0x00	; 0
      0000DB 00                     655 	.db #0x00	; 0
      0000DC 00                     656 	.db #0x00	; 0
      0000DD 00                     657 	.db #0x00	; 0
      0000DE 00                     658 	.db #0x00	; 0
      0000DF 00                     659 	.db #0x00	; 0
      0000E0 00                     660 	.db #0x00	; 0
      0000E1 00                     661 	.db #0x00	; 0
      0000E2 00                     662 	.db #0x00	; 0
      0000E3 00                     663 	.db #0x00	; 0
      0000E4 00                     664 	.db #0x00	; 0
      0000E5 00                     665 	.db #0x00	; 0
      0000E6 00                     666 	.db #0x00	; 0
      0000E7 00                     667 	.db #0x00	; 0
      0000E8 00                     668 	.db #0x00	; 0
      0000E9 00                     669 	.db #0x00	; 0
      0000EA 00                     670 	.db #0x00	; 0
      0000EB 00                     671 	.db #0x00	; 0
      0000EC 00                     672 	.db #0x00	; 0
      0000ED 00                     673 	.db #0x00	; 0
      0000EE 00                     674 	.db #0x00	; 0
      0000EF 00                     675 	.db #0x00	; 0
      0000F0 00                     676 	.db #0x00	; 0
      0000F1 00                     677 	.db #0x00	; 0
      0000F2 00                     678 	.db #0x00	; 0
      0000F3 00                     679 	.db #0x00	; 0
      0000F4 00                     680 	.db #0x00	; 0
      0000F5 00                     681 	.db #0x00	; 0
      0000F6 00                     682 	.db #0x00	; 0
      0000F7 00                     683 	.db #0x00	; 0
      0000F8 00                     684 	.db #0x00	; 0
      0000F9 00                     685 	.db #0x00	; 0
      0000FA 00                     686 	.db #0x00	; 0
      0000FB 00                     687 	.db #0x00	; 0
      0000FC 00                     688 	.db #0x00	; 0
      0000FD 00                     689 	.db #0x00	; 0
      0000FE 00                     690 	.db #0x00	; 0
      0000FF 00                     691 	.db #0x00	; 0
      000100 00                     692 	.db #0x00	; 0
      000101 00                     693 	.db #0x00	; 0
      000102 00                     694 	.db #0x00	; 0
      000103 00                     695 	.db #0x00	; 0
      000104 00                     696 	.db #0x00	; 0
      000105 00                     697 	.db #0x00	; 0
      000106 00                     698 	.db #0x00	; 0
      000107 00                     699 	.db #0x00	; 0
      000108 00                     700 	.db #0x00	; 0
      000109 00                     701 	.db #0x00	; 0
      00010A 00                     702 	.db #0x00	; 0
      00010B 00                     703 	.db #0x00	; 0
      00010C 00                     704 	.db #0x00	; 0
      00010D 00                     705 	.db #0x00	; 0
      00010E 00                     706 	.db #0x00	; 0
      00010F 00                     707 	.db #0x00	; 0
      000110 00                     708 	.db #0x00	; 0
      000111 00                     709 	.db #0x00	; 0
      000112 00                     710 	.db #0x00	; 0
      000113 00                     711 	.db #0x00	; 0
      000114 00                     712 	.db #0x00	; 0
      000115 00                     713 	.db #0x00	; 0
      000116 00                     714 	.db #0x00	; 0
      000117 00                     715 	.db #0x00	; 0
      000118 00                     716 	.db #0x00	; 0
      000119 00                     717 	.db #0x00	; 0
      00011A 00                     718 	.db #0x00	; 0
      00011B 00                     719 	.db #0x00	; 0
      00011C 00                     720 	.db #0x00	; 0
      00011D 00                     721 	.db #0x00	; 0
      00011E 00                     722 	.db #0x00	; 0
      00011F 00                     723 	.db #0x00	; 0
      000120 00                     724 	.db #0x00	; 0
      000121 00                     725 	.db #0x00	; 0
      000122 00                     726 	.db #0x00	; 0
      000123 00                     727 	.db #0x00	; 0
      000124 00                     728 	.db #0x00	; 0
      000125 00                     729 	.db #0x00	; 0
                           000126   730 	G$makeLeadingZeroString$0$0	= .
                                    731 	.globl	G$makeLeadingZeroString$0$0
                           000126   732 	C$common.c$64$1_0$155	= .
                                    733 	.globl	C$common.c$64$1_0$155
                                    734 ;src/rom0/common.c:64: void makeLeadingZeroString(uint8_t value, unsigned char finalStr[4]) {
                                    735 ;	---------------------------------
                                    736 ; Function makeLeadingZeroString
                                    737 ; ---------------------------------
      000126                        738 _makeLeadingZeroString::
      000126 E8 F9            [16]  739 	add	sp, #-7
      000128 F8 06            [12]  740 	ldhl	sp,	#6
      00012A 32               [ 8]  741 	ld	(hl-), a
      00012B 2B               [ 8]  742 	dec	hl
      00012C 7B               [ 4]  743 	ld	a, e
      00012D 22               [ 8]  744 	ld	(hl+), a
      00012E 72               [ 8]  745 	ld	(hl), d
                           00012F   746 	C$common.c$65$2_0$155	= .
                                    747 	.globl	C$common.c$65$2_0$155
                                    748 ;src/rom0/common.c:65: unsigned char val[4] = "000";
      00012F F8 00            [12]  749 	ldhl	sp,	#0
      000131 3E 30            [ 8]  750 	ld	a,#0x30
      000133 22               [ 8]  751 	ld	(hl+),a
      000134 22               [ 8]  752 	ld	(hl+), a
      000135 3E 30            [ 8]  753 	ld	a, #0x30
      000137 22               [ 8]  754 	ld	(hl+), a
      000138 36 00            [12]  755 	ld	(hl), #0x00
                           00013A   756 	C$common.c$66$1_0$155	= .
                                    757 	.globl	C$common.c$66$1_0$155
                                    758 ;src/rom0/common.c:66: uitoa(value, val, 10);
      00013A F8 06            [12]  759 	ldhl	sp,	#6
      00013C 4E               [ 8]  760 	ld	c, (hl)
      00013D 1E 00            [ 8]  761 	ld	e, #0x00
      00013F 3E 0A            [ 8]  762 	ld	a, #0x0a
      000141 F5               [16]  763 	push	af
      000142 33               [ 8]  764 	inc	sp
      000143 21 01 00         [12]  765 	ld	hl, #1
      000146 39               [ 8]  766 	add	hl, sp
      000147 E5               [16]  767 	push	hl
      000148 43               [ 4]  768 	ld	b, e
      000149 C5               [16]  769 	push	bc
      00014A CDr00r00         [24]  770 	call	_uitoa
      00014D E8 05            [16]  771 	add	sp, #5
                           00014F   772 	C$common.c$67$1_0$155	= .
                                    773 	.globl	C$common.c$67$1_0$155
                                    774 ;src/rom0/common.c:67: if(value < 10u) {
      00014F F8 06            [12]  775 	ldhl	sp,	#6
      000151 7E               [ 8]  776 	ld	a, (hl)
      000152 D6 0A            [ 8]  777 	sub	a, #0x0a
      000154 30 11            [12]  778 	jr	NC, 00104$
                           000156   779 	C$common.c$68$2_0$156	= .
                                    780 	.globl	C$common.c$68$2_0$156
                                    781 ;src/rom0/common.c:68: strcpy(finalStr, "00");
      000156 2B               [ 8]  782 	dec	hl
      000157 2B               [ 8]  783 	dec	hl
      000158 11r8Er01         [12]  784 	ld	de, #___str_1
      00015B D5               [16]  785 	push	de
      00015C 2A               [ 8]  786 	ld	a, (hl+)
      00015D 5F               [ 4]  787 	ld	e, a
      00015E 56               [ 8]  788 	ld	d, (hl)
      00015F D5               [16]  789 	push	de
      000160 CDr00r00         [24]  790 	call	_strcpy
      000163 E8 04            [16]  791 	add	sp, #4
      000165 18 16            [12]  792 	jr	00105$
      000167                        793 00104$:
                           000167   794 	C$common.c$69$1_0$155	= .
                                    795 	.globl	C$common.c$69$1_0$155
                                    796 ;src/rom0/common.c:69: } else if (value < 100u) {
      000167 F8 06            [12]  797 	ldhl	sp,	#6
      000169 7E               [ 8]  798 	ld	a, (hl)
      00016A D6 64            [ 8]  799 	sub	a, #0x64
      00016C 30 0F            [12]  800 	jr	NC, 00105$
                           00016E   801 	C$common.c$70$2_0$157	= .
                                    802 	.globl	C$common.c$70$2_0$157
                                    803 ;src/rom0/common.c:70: strcpy(finalStr, "0");
      00016E 2B               [ 8]  804 	dec	hl
      00016F 2B               [ 8]  805 	dec	hl
      000170 11r91r01         [12]  806 	ld	de, #___str_2
      000173 D5               [16]  807 	push	de
      000174 2A               [ 8]  808 	ld	a, (hl+)
      000175 5F               [ 4]  809 	ld	e, a
      000176 56               [ 8]  810 	ld	d, (hl)
      000177 D5               [16]  811 	push	de
      000178 CDr00r00         [24]  812 	call	_strcpy
      00017B E8 04            [16]  813 	add	sp, #4
      00017D                        814 00105$:
                           00017D   815 	C$common.c$72$1_0$155	= .
                                    816 	.globl	C$common.c$72$1_0$155
                                    817 ;src/rom0/common.c:72: strcat(finalStr, val);
      00017D 21 00 00         [12]  818 	ld	hl, #0
      000180 39               [ 8]  819 	add	hl, sp
      000181 4D               [ 4]  820 	ld	c, l
      000182 44               [ 4]  821 	ld	b, h
      000183 F8 04            [12]  822 	ldhl	sp,	#4
      000185 2A               [ 8]  823 	ld	a, (hl+)
      000186 5F               [ 4]  824 	ld	e, a
      000187 56               [ 8]  825 	ld	d, (hl)
      000188 CDr00r00         [24]  826 	call	_strcat
                           00018B   827 	C$common.c$73$1_0$155	= .
                                    828 	.globl	C$common.c$73$1_0$155
                                    829 ;src/rom0/common.c:73: }
      00018B E8 07            [16]  830 	add	sp, #7
                           00018D   831 	C$common.c$73$1_0$155	= .
                                    832 	.globl	C$common.c$73$1_0$155
                           00018D   833 	XG$makeLeadingZeroString$0$0	= .
                                    834 	.globl	XG$makeLeadingZeroString$0$0
      00018D C9               [16]  835 	ret
                           00018E   836 Fcommon$__str_1$0_0$0 == .
      00018E                        837 ___str_1:
      00018E 30 30                  838 	.ascii "00"
      000190 00                     839 	.db 0x00
                           000191   840 Fcommon$__str_2$0_0$0 == .
      000191                        841 ___str_2:
      000191 30                     842 	.ascii "0"
      000192 00                     843 	.db 0x00
                           000193   844 	G$drawWindowBorder$0$0	= .
                                    845 	.globl	G$drawWindowBorder$0$0
                           000193   846 	C$common.c$84$1_0$159	= .
                                    847 	.globl	C$common.c$84$1_0$159
                                    848 ;src/rom0/common.c:84: void drawWindowBorder(uint8_t x, uint8_t y, uint8_t w, uint8_t h) {
                                    849 ;	---------------------------------
                                    850 ; Function drawWindowBorder
                                    851 ; ---------------------------------
      000193                        852 _drawWindowBorder::
      000193 3B               [ 8]  853 	dec	sp
      000194 3B               [ 8]  854 	dec	sp
      000195 4F               [ 4]  855 	ld	c, a
      000196 43               [ 4]  856 	ld	b, e
                           000197   857 	C$common.c$85$1_0$159	= .
                                    858 	.globl	C$common.c$85$1_0$159
                                    859 ;src/rom0/common.c:85: uint8_t bottomY = y + h - 1u;
      000197 78               [ 4]  860 	ld	a, b
      000198 F8 05            [12]  861 	ldhl	sp,	#5
      00019A 86               [ 8]  862 	add	a, (hl)
      00019B 3D               [ 4]  863 	dec	a
      00019C F8 00            [12]  864 	ldhl	sp,	#0
      00019E 77               [ 8]  865 	ld	(hl), a
                           00019F   866 	C$common.c$86$1_0$159	= .
                                    867 	.globl	C$common.c$86$1_0$159
                                    868 ;src/rom0/common.c:86: uint8_t rightX = x + w - 1u;
      00019F 79               [ 4]  869 	ld	a, c
      0001A0 F8 04            [12]  870 	ldhl	sp,	#4
      0001A2 86               [ 8]  871 	add	a, (hl)
      0001A3 3D               [ 4]  872 	dec	a
      0001A4 F8 01            [12]  873 	ldhl	sp,	#1
      0001A6 77               [ 8]  874 	ld	(hl), a
                           0001A7   875 	C$common.c$89$1_0$159	= .
                                    876 	.globl	C$common.c$89$1_0$159
                                    877 ;src/rom0/common.c:89: if(RENDER_TARGET == RENDER_TARGET_BKG) {
      0001A7 FAr15r00         [16]  878 	ld	a, (#_RENDER_TARGET)
      0001AA B7               [ 4]  879 	or	a, a
      0001AB 20 40            [12]  880 	jr	NZ, 00102$
                           0001AD   881 	C$common.c$90$2_0$160	= .
                                    882 	.globl	C$common.c$90$2_0$160
                                    883 ;src/rom0/common.c:90: set_bkg_tile_xy(x, y, VRAM_WINDOW_BORDER_TOPLEFT);
      0001AD 3E 60            [ 8]  884 	ld	a, #0x60
      0001AF F5               [16]  885 	push	af
      0001B0 33               [ 8]  886 	inc	sp
      0001B1 C5               [16]  887 	push	bc
      0001B2 33               [ 8]  888 	inc	sp
      0001B3 79               [ 4]  889 	ld	a, c
      0001B4 F5               [16]  890 	push	af
      0001B5 33               [ 8]  891 	inc	sp
      0001B6 CDr00r00         [24]  892 	call	_set_bkg_tile_xy
      0001B9 E8 03            [16]  893 	add	sp, #3
                           0001BB   894 	C$common.c$91$2_0$160	= .
                                    895 	.globl	C$common.c$91$2_0$160
                                    896 ;src/rom0/common.c:91: set_bkg_tile_xy(rightX, y, VRAM_WINDOW_BORDER_TOPRIGHT);
      0001BB 3E 61            [ 8]  897 	ld	a, #0x61
      0001BD F5               [16]  898 	push	af
      0001BE 33               [ 8]  899 	inc	sp
      0001BF C5               [16]  900 	push	bc
      0001C0 33               [ 8]  901 	inc	sp
      0001C1 F8 03            [12]  902 	ldhl	sp,	#3
      0001C3 7E               [ 8]  903 	ld	a, (hl)
      0001C4 F5               [16]  904 	push	af
      0001C5 33               [ 8]  905 	inc	sp
      0001C6 CDr00r00         [24]  906 	call	_set_bkg_tile_xy
      0001C9 E8 03            [16]  907 	add	sp, #3
                           0001CB   908 	C$common.c$92$2_0$160	= .
                                    909 	.globl	C$common.c$92$2_0$160
                                    910 ;src/rom0/common.c:92: set_bkg_tile_xy(x, bottomY, VRAM_WINDOW_BORDER_BOTTOMLEFT);
      0001CB 3E 62            [ 8]  911 	ld	a, #0x62
      0001CD F5               [16]  912 	push	af
      0001CE 33               [ 8]  913 	inc	sp
      0001CF F8 01            [12]  914 	ldhl	sp,	#1
      0001D1 7E               [ 8]  915 	ld	a, (hl)
      0001D2 F5               [16]  916 	push	af
      0001D3 33               [ 8]  917 	inc	sp
      0001D4 79               [ 4]  918 	ld	a, c
      0001D5 F5               [16]  919 	push	af
      0001D6 33               [ 8]  920 	inc	sp
      0001D7 CDr00r00         [24]  921 	call	_set_bkg_tile_xy
      0001DA E8 03            [16]  922 	add	sp, #3
                           0001DC   923 	C$common.c$93$2_0$160	= .
                                    924 	.globl	C$common.c$93$2_0$160
                                    925 ;src/rom0/common.c:93: set_bkg_tile_xy(rightX, bottomY, VRAM_WINDOW_BORDER_BOTTOMRIGHT);
      0001DC 3E 63            [ 8]  926 	ld	a, #0x63
      0001DE F5               [16]  927 	push	af
      0001DF 33               [ 8]  928 	inc	sp
      0001E0 F8 01            [12]  929 	ldhl	sp,	#1
      0001E2 2A               [ 8]  930 	ld	a, (hl+)
      0001E3 57               [ 4]  931 	ld	d, a
      0001E4 5E               [ 8]  932 	ld	e, (hl)
      0001E5 D5               [16]  933 	push	de
      0001E6 CDr00r00         [24]  934 	call	_set_bkg_tile_xy
      0001E9 E8 03            [16]  935 	add	sp, #3
      0001EB 18 3E            [12]  936 	jr	00103$
      0001ED                        937 00102$:
                           0001ED   938 	C$common.c$95$2_0$161	= .
                                    939 	.globl	C$common.c$95$2_0$161
                                    940 ;src/rom0/common.c:95: set_win_tile_xy(x, y, VRAM_WINDOW_BORDER_TOPLEFT);
      0001ED 3E 60            [ 8]  941 	ld	a, #0x60
      0001EF F5               [16]  942 	push	af
      0001F0 33               [ 8]  943 	inc	sp
      0001F1 C5               [16]  944 	push	bc
      0001F2 33               [ 8]  945 	inc	sp
      0001F3 79               [ 4]  946 	ld	a, c
      0001F4 F5               [16]  947 	push	af
      0001F5 33               [ 8]  948 	inc	sp
      0001F6 CDr00r00         [24]  949 	call	_set_win_tile_xy
      0001F9 E8 03            [16]  950 	add	sp, #3
                           0001FB   951 	C$common.c$96$2_0$161	= .
                                    952 	.globl	C$common.c$96$2_0$161
                                    953 ;src/rom0/common.c:96: set_win_tile_xy(rightX, y, VRAM_WINDOW_BORDER_TOPRIGHT);
      0001FB 3E 61            [ 8]  954 	ld	a, #0x61
      0001FD F5               [16]  955 	push	af
      0001FE 33               [ 8]  956 	inc	sp
      0001FF C5               [16]  957 	push	bc
      000200 33               [ 8]  958 	inc	sp
      000201 F8 03            [12]  959 	ldhl	sp,	#3
      000203 7E               [ 8]  960 	ld	a, (hl)
      000204 F5               [16]  961 	push	af
      000205 33               [ 8]  962 	inc	sp
      000206 CDr00r00         [24]  963 	call	_set_win_tile_xy
      000209 E8 03            [16]  964 	add	sp, #3
                           00020B   965 	C$common.c$97$2_0$161	= .
                                    966 	.globl	C$common.c$97$2_0$161
                                    967 ;src/rom0/common.c:97: set_win_tile_xy(x, bottomY, VRAM_WINDOW_BORDER_BOTTOMLEFT);
      00020B 3E 62            [ 8]  968 	ld	a, #0x62
      00020D F5               [16]  969 	push	af
      00020E 33               [ 8]  970 	inc	sp
      00020F F8 01            [12]  971 	ldhl	sp,	#1
      000211 7E               [ 8]  972 	ld	a, (hl)
      000212 F5               [16]  973 	push	af
      000213 33               [ 8]  974 	inc	sp
      000214 79               [ 4]  975 	ld	a, c
      000215 F5               [16]  976 	push	af
      000216 33               [ 8]  977 	inc	sp
      000217 CDr00r00         [24]  978 	call	_set_win_tile_xy
      00021A E8 03            [16]  979 	add	sp, #3
                           00021C   980 	C$common.c$98$2_0$161	= .
                                    981 	.globl	C$common.c$98$2_0$161
                                    982 ;src/rom0/common.c:98: set_win_tile_xy(rightX, bottomY, VRAM_WINDOW_BORDER_BOTTOMRIGHT);
      00021C 3E 63            [ 8]  983 	ld	a, #0x63
      00021E F5               [16]  984 	push	af
      00021F 33               [ 8]  985 	inc	sp
      000220 F8 01            [12]  986 	ldhl	sp,	#1
      000222 2A               [ 8]  987 	ld	a, (hl+)
      000223 57               [ 4]  988 	ld	d, a
      000224 5E               [ 8]  989 	ld	e, (hl)
      000225 D5               [16]  990 	push	de
      000226 CDr00r00         [24]  991 	call	_set_win_tile_xy
      000229 E8 03            [16]  992 	add	sp, #3
      00022B                        993 00103$:
                           00022B   994 	C$common.c$102$1_0$159	= .
                                    995 	.globl	C$common.c$102$1_0$159
                                    996 ;src/rom0/common.c:102: LOOP_INDEX = 1;
      00022B 21r06r00         [12]  997 	ld	hl, #_LOOP_INDEX
      00022E 36 01            [12]  998 	ld	(hl), #0x01
                           000230   999 	C$common.c$103$1_0$159	= .
                                   1000 	.globl	C$common.c$103$1_0$159
                                   1001 ;src/rom0/common.c:103: LOOP_LIMIT = w - 1u;
      000230 F8 04            [12] 1002 	ldhl	sp,	#4
      000232 7E               [ 8] 1003 	ld	a, (hl)
      000233 3D               [ 4] 1004 	dec	a
      000234 EAr07r00         [16] 1005 	ld	(#_LOOP_LIMIT),a
                           000237  1006 	C$common.c$104$1_0$159	= .
                                   1007 	.globl	C$common.c$104$1_0$159
                                   1008 ;src/rom0/common.c:104: while(LOOP_INDEX < LOOP_LIMIT) {
      000237                       1009 00107$:
      000237 FAr06r00         [16] 1010 	ld	a, (#_LOOP_INDEX)
      00023A 21r07r00         [12] 1011 	ld	hl, #_LOOP_LIMIT
      00023D 96               [ 8] 1012 	sub	a, (hl)
      00023E 30 58            [12] 1013 	jr	NC, 00109$
                           000240  1014 	C$common.c$106$1_0$159	= .
                                   1015 	.globl	C$common.c$106$1_0$159
                                   1016 ;src/rom0/common.c:106: set_bkg_tile_xy(x + LOOP_INDEX, y, VRAM_WINDOW_BORDER_TOP);
      000240 79               [ 4] 1017 	ld	a, c
      000241 21r06r00         [12] 1018 	ld	hl, #_LOOP_INDEX
      000244 86               [ 8] 1019 	add	a, (hl)
      000245 57               [ 4] 1020 	ld	d, a
                           000246  1021 	C$common.c$105$2_0$162	= .
                                   1022 	.globl	C$common.c$105$2_0$162
                                   1023 ;src/rom0/common.c:105: if(RENDER_TARGET == RENDER_TARGET_BKG) {
      000246 FAr15r00         [16] 1024 	ld	a, (#_RENDER_TARGET)
      000249 B7               [ 4] 1025 	or	a, a
      00024A 20 24            [12] 1026 	jr	NZ, 00105$
                           00024C  1027 	C$common.c$106$3_0$163	= .
                                   1028 	.globl	C$common.c$106$3_0$163
                                   1029 ;src/rom0/common.c:106: set_bkg_tile_xy(x + LOOP_INDEX, y, VRAM_WINDOW_BORDER_TOP);
      00024C 3E 64            [ 8] 1030 	ld	a, #0x64
      00024E F5               [16] 1031 	push	af
      00024F 33               [ 8] 1032 	inc	sp
      000250 C5               [16] 1033 	push	bc
      000251 33               [ 8] 1034 	inc	sp
      000252 D5               [16] 1035 	push	de
      000253 33               [ 8] 1036 	inc	sp
      000254 CDr00r00         [24] 1037 	call	_set_bkg_tile_xy
      000257 E8 03            [16] 1038 	add	sp, #3
                           000259  1039 	C$common.c$107$3_0$163	= .
                                   1040 	.globl	C$common.c$107$3_0$163
                                   1041 ;src/rom0/common.c:107: set_bkg_tile_xy(x + LOOP_INDEX, bottomY, VRAM_WINDOW_BORDER_BOTTOM);
      000259 79               [ 4] 1042 	ld	a, c
      00025A 21r06r00         [12] 1043 	ld	hl, #_LOOP_INDEX
      00025D 86               [ 8] 1044 	add	a, (hl)
      00025E 26 67            [ 8] 1045 	ld	h, #0x67
                                   1046 ;	spillPairReg hl
                                   1047 ;	spillPairReg hl
      000260 E5               [16] 1048 	push	hl
      000261 33               [ 8] 1049 	inc	sp
      000262 F8 01            [12] 1050 	ldhl	sp,	#1
      000264 66               [ 8] 1051 	ld	h, (hl)
                                   1052 ;	spillPairReg hl
                                   1053 ;	spillPairReg hl
      000265 E5               [16] 1054 	push	hl
      000266 33               [ 8] 1055 	inc	sp
      000267 F5               [16] 1056 	push	af
      000268 33               [ 8] 1057 	inc	sp
      000269 CDr00r00         [24] 1058 	call	_set_bkg_tile_xy
      00026C E8 03            [16] 1059 	add	sp, #3
      00026E 18 22            [12] 1060 	jr	00106$
      000270                       1061 00105$:
                           000270  1062 	C$common.c$109$3_0$164	= .
                                   1063 	.globl	C$common.c$109$3_0$164
                                   1064 ;src/rom0/common.c:109: set_win_tile_xy(x + LOOP_INDEX, y, VRAM_WINDOW_BORDER_TOP);
      000270 3E 64            [ 8] 1065 	ld	a, #0x64
      000272 F5               [16] 1066 	push	af
      000273 33               [ 8] 1067 	inc	sp
      000274 C5               [16] 1068 	push	bc
      000275 33               [ 8] 1069 	inc	sp
      000276 D5               [16] 1070 	push	de
      000277 33               [ 8] 1071 	inc	sp
      000278 CDr00r00         [24] 1072 	call	_set_win_tile_xy
      00027B E8 03            [16] 1073 	add	sp, #3
                           00027D  1074 	C$common.c$110$3_0$164	= .
                                   1075 	.globl	C$common.c$110$3_0$164
                                   1076 ;src/rom0/common.c:110: set_win_tile_xy(x + LOOP_INDEX, bottomY, VRAM_WINDOW_BORDER_BOTTOM);
      00027D 79               [ 4] 1077 	ld	a, c
      00027E 21r06r00         [12] 1078 	ld	hl, #_LOOP_INDEX
      000281 86               [ 8] 1079 	add	a, (hl)
      000282 26 67            [ 8] 1080 	ld	h, #0x67
                                   1081 ;	spillPairReg hl
                                   1082 ;	spillPairReg hl
      000284 E5               [16] 1083 	push	hl
      000285 33               [ 8] 1084 	inc	sp
      000286 F8 01            [12] 1085 	ldhl	sp,	#1
      000288 66               [ 8] 1086 	ld	h, (hl)
                                   1087 ;	spillPairReg hl
                                   1088 ;	spillPairReg hl
      000289 E5               [16] 1089 	push	hl
      00028A 33               [ 8] 1090 	inc	sp
      00028B F5               [16] 1091 	push	af
      00028C 33               [ 8] 1092 	inc	sp
      00028D CDr00r00         [24] 1093 	call	_set_win_tile_xy
      000290 E8 03            [16] 1094 	add	sp, #3
      000292                       1095 00106$:
                           000292  1096 	C$common.c$112$2_0$162	= .
                                   1097 	.globl	C$common.c$112$2_0$162
                                   1098 ;src/rom0/common.c:112: LOOP_INDEX++;
      000292 21r06r00         [12] 1099 	ld	hl, #_LOOP_INDEX
      000295 34               [12] 1100 	inc	(hl)
      000296 18 9F            [12] 1101 	jr	00107$
      000298                       1102 00109$:
                           000298  1103 	C$common.c$114$1_0$159	= .
                                   1104 	.globl	C$common.c$114$1_0$159
                                   1105 ;src/rom0/common.c:114: LOOP_INDEX = 1u;
      000298 21r06r00         [12] 1106 	ld	hl, #_LOOP_INDEX
      00029B 36 01            [12] 1107 	ld	(hl), #0x01
                           00029D  1108 	C$common.c$115$1_0$159	= .
                                   1109 	.globl	C$common.c$115$1_0$159
                                   1110 ;src/rom0/common.c:115: LOOP_LIMIT = h - 1u;
      00029D F8 05            [12] 1111 	ldhl	sp,	#5
      00029F 7E               [ 8] 1112 	ld	a, (hl)
      0002A0 3D               [ 4] 1113 	dec	a
      0002A1 EAr07r00         [16] 1114 	ld	(#_LOOP_LIMIT),a
                           0002A4  1115 	C$common.c$116$1_0$159	= .
                                   1116 	.globl	C$common.c$116$1_0$159
                                   1117 ;src/rom0/common.c:116: while(LOOP_INDEX < LOOP_LIMIT) {
      0002A4                       1118 00113$:
      0002A4 FAr06r00         [16] 1119 	ld	a, (#_LOOP_INDEX)
      0002A7 21r07r00         [12] 1120 	ld	hl, #_LOOP_LIMIT
      0002AA 96               [ 8] 1121 	sub	a, (hl)
      0002AB 30 54            [12] 1122 	jr	NC, 00116$
                           0002AD  1123 	C$common.c$118$1_0$159	= .
                                   1124 	.globl	C$common.c$118$1_0$159
                                   1125 ;src/rom0/common.c:118: set_bkg_tile_xy(x, y + LOOP_INDEX, VRAM_WINDOW_BORDER_LEFT);
      0002AD 78               [ 4] 1126 	ld	a, b
      0002AE 21r06r00         [12] 1127 	ld	hl, #_LOOP_INDEX
      0002B1 86               [ 8] 1128 	add	a, (hl)
      0002B2 57               [ 4] 1129 	ld	d, a
                           0002B3  1130 	C$common.c$117$2_0$165	= .
                                   1131 	.globl	C$common.c$117$2_0$165
                                   1132 ;src/rom0/common.c:117: if(RENDER_TARGET == RENDER_TARGET_BKG) {
      0002B3 FAr15r00         [16] 1133 	ld	a, (#_RENDER_TARGET)
      0002B6 B7               [ 4] 1134 	or	a, a
      0002B7 20 22            [12] 1135 	jr	NZ, 00111$
                           0002B9  1136 	C$common.c$118$3_0$166	= .
                                   1137 	.globl	C$common.c$118$3_0$166
                                   1138 ;src/rom0/common.c:118: set_bkg_tile_xy(x, y + LOOP_INDEX, VRAM_WINDOW_BORDER_LEFT);
      0002B9 3E 65            [ 8] 1139 	ld	a, #0x65
      0002BB F5               [16] 1140 	push	af
      0002BC 33               [ 8] 1141 	inc	sp
      0002BD 59               [ 4] 1142 	ld	e, c
      0002BE D5               [16] 1143 	push	de
      0002BF CDr00r00         [24] 1144 	call	_set_bkg_tile_xy
      0002C2 E8 03            [16] 1145 	add	sp, #3
                           0002C4  1146 	C$common.c$119$3_0$166	= .
                                   1147 	.globl	C$common.c$119$3_0$166
                                   1148 ;src/rom0/common.c:119: set_bkg_tile_xy(rightX, y + LOOP_INDEX, VRAM_WINDOW_BORDER_RIGHT);
      0002C4 78               [ 4] 1149 	ld	a, b
      0002C5 21r06r00         [12] 1150 	ld	hl, #_LOOP_INDEX
      0002C8 86               [ 8] 1151 	add	a, (hl)
      0002C9 26 66            [ 8] 1152 	ld	h, #0x66
                                   1153 ;	spillPairReg hl
                                   1154 ;	spillPairReg hl
      0002CB E5               [16] 1155 	push	hl
      0002CC 33               [ 8] 1156 	inc	sp
      0002CD F5               [16] 1157 	push	af
      0002CE 33               [ 8] 1158 	inc	sp
      0002CF F8 03            [12] 1159 	ldhl	sp,	#3
      0002D1 7E               [ 8] 1160 	ld	a, (hl)
      0002D2 F5               [16] 1161 	push	af
      0002D3 33               [ 8] 1162 	inc	sp
      0002D4 CDr00r00         [24] 1163 	call	_set_bkg_tile_xy
      0002D7 E8 03            [16] 1164 	add	sp, #3
      0002D9 18 20            [12] 1165 	jr	00112$
      0002DB                       1166 00111$:
                           0002DB  1167 	C$common.c$121$3_0$167	= .
                                   1168 	.globl	C$common.c$121$3_0$167
                                   1169 ;src/rom0/common.c:121: set_win_tile_xy(x, y + LOOP_INDEX, VRAM_WINDOW_BORDER_LEFT);
      0002DB 3E 65            [ 8] 1170 	ld	a, #0x65
      0002DD F5               [16] 1171 	push	af
      0002DE 33               [ 8] 1172 	inc	sp
      0002DF 59               [ 4] 1173 	ld	e, c
      0002E0 D5               [16] 1174 	push	de
      0002E1 CDr00r00         [24] 1175 	call	_set_win_tile_xy
      0002E4 E8 03            [16] 1176 	add	sp, #3
                           0002E6  1177 	C$common.c$122$3_0$167	= .
                                   1178 	.globl	C$common.c$122$3_0$167
                                   1179 ;src/rom0/common.c:122: set_win_tile_xy(rightX, y + LOOP_INDEX, VRAM_WINDOW_BORDER_RIGHT);
      0002E6 78               [ 4] 1180 	ld	a, b
      0002E7 21r06r00         [12] 1181 	ld	hl, #_LOOP_INDEX
      0002EA 86               [ 8] 1182 	add	a, (hl)
      0002EB 26 66            [ 8] 1183 	ld	h, #0x66
                                   1184 ;	spillPairReg hl
                                   1185 ;	spillPairReg hl
      0002ED E5               [16] 1186 	push	hl
      0002EE 33               [ 8] 1187 	inc	sp
      0002EF F5               [16] 1188 	push	af
      0002F0 33               [ 8] 1189 	inc	sp
      0002F1 F8 03            [12] 1190 	ldhl	sp,	#3
      0002F3 7E               [ 8] 1191 	ld	a, (hl)
      0002F4 F5               [16] 1192 	push	af
      0002F5 33               [ 8] 1193 	inc	sp
      0002F6 CDr00r00         [24] 1194 	call	_set_win_tile_xy
      0002F9 E8 03            [16] 1195 	add	sp, #3
      0002FB                       1196 00112$:
                           0002FB  1197 	C$common.c$124$2_0$165	= .
                                   1198 	.globl	C$common.c$124$2_0$165
                                   1199 ;src/rom0/common.c:124: LOOP_INDEX++;
      0002FB 21r06r00         [12] 1200 	ld	hl, #_LOOP_INDEX
      0002FE 34               [12] 1201 	inc	(hl)
      0002FF 18 A3            [12] 1202 	jr	00113$
      000301                       1203 00116$:
                           000301  1204 	C$common.c$126$1_0$159	= .
                                   1205 	.globl	C$common.c$126$1_0$159
                                   1206 ;src/rom0/common.c:126: }
      000301 33               [ 8] 1207 	inc	sp
      000302 33               [ 8] 1208 	inc	sp
      000303 E1               [12] 1209 	pop	hl
      000304 F1               [12] 1210 	pop	af
      000305 E9               [ 4] 1211 	jp	(hl)
                                   1212 	.area _CODE_0
                                   1213 	.area _INITIALIZER
                           000000  1214 Fcommon$__xinit_GAME_STATE$0_0$0 == .
      000000                       1215 __xinit__GAME_STATE:
      000000 00                    1216 	.db #0x00	; 0
                           000001  1217 Fcommon$__xinit_PREVIOUS_GAME_STATE$0_0$0 == .
      000001                       1218 __xinit__PREVIOUS_GAME_STATE:
      000001 00                    1219 	.db #0x00	; 0
                           000002  1220 Fcommon$__xinit_SCENE_SUBMODE$0_0$0 == .
      000002                       1221 __xinit__SCENE_SUBMODE:
      000002 00                    1222 	.db #0x00	; 0
                           000003  1223 Fcommon$__xinit_SCENE_SUBMODE_PREV$0_0$0 == .
      000003                       1224 __xinit__SCENE_SUBMODE_PREV:
      000003 00                    1225 	.db #0x00	; 0
                           000004  1226 Fcommon$__xinit_JOYPAD_CURRENT$0_0$0 == .
      000004                       1227 __xinit__JOYPAD_CURRENT:
      000004 00                    1228 	.db #0x00	; 0
                           000005  1229 Fcommon$__xinit_JOYPAD_PREVIOUS$0_0$0 == .
      000005                       1230 __xinit__JOYPAD_PREVIOUS:
      000005 00                    1231 	.db #0x00	; 0
                           000006  1232 Fcommon$__xinit_LOOP_INDEX$0_0$0 == .
      000006                       1233 __xinit__LOOP_INDEX:
      000006 00                    1234 	.db #0x00	; 0
                           000007  1235 Fcommon$__xinit_LOOP_LIMIT$0_0$0 == .
      000007                       1236 __xinit__LOOP_LIMIT:
      000007 12                    1237 	.db #0x12	; 18
                           000008  1238 Fcommon$__xinit_CURSOR_INDEX$0_0$0 == .
      000008                       1239 __xinit__CURSOR_INDEX:
      000008 00                    1240 	.db #0x00	; 0
                           000009  1241 Fcommon$__xinit_CURSOR_INDEX_PREV$0_0$0 == .
      000009                       1242 __xinit__CURSOR_INDEX_PREV:
      000009 00                    1243 	.db #0x00	; 0
                           00000A  1244 Fcommon$__xinit_RNG_8$0_0$0 == .
      00000A                       1245 __xinit__RNG_8:
      00000A 00                    1246 	.db #0x00	; 0
                           00000B  1247 Fcommon$__xinit_TEMP_VAR_A$0_0$0 == .
      00000B                       1248 __xinit__TEMP_VAR_A:
      00000B 00                    1249 	.db #0x00	; 0
                           00000C  1250 Fcommon$__xinit_TEMP_VAR_B$0_0$0 == .
      00000C                       1251 __xinit__TEMP_VAR_B:
      00000C 00                    1252 	.db #0x00	; 0
                           00000D  1253 Fcommon$__xinit_TEMP_VAR_C$0_0$0 == .
      00000D                       1254 __xinit__TEMP_VAR_C:
      00000D 00                    1255 	.db #0x00	; 0
                           00000E  1256 Fcommon$__xinit_TEMP_VAR_D$0_0$0 == .
      00000E                       1257 __xinit__TEMP_VAR_D:
      00000E 00                    1258 	.db #0x00	; 0
                           00000F  1259 Fcommon$__xinit_TEMP_VAR_E$0_0$0 == .
      00000F                       1260 __xinit__TEMP_VAR_E:
      00000F 00                    1261 	.db #0x00	; 0
                           000010  1262 Fcommon$__xinit_TEMP_VAR_F$0_0$0 == .
      000010                       1263 __xinit__TEMP_VAR_F:
      000010 00                    1264 	.db #0x00	; 0
                           000011  1265 Fcommon$__xinit_FRAME_COUNTER$0_0$0 == .
      000011                       1266 __xinit__FRAME_COUNTER:
      000011 00                    1267 	.db #0x00	; 0
                           000012  1268 Fcommon$__xinit_ANIMATION_TICK$0_0$0 == .
      000012                       1269 __xinit__ANIMATION_TICK:
      000012 00                    1270 	.db #0x00	; 0
                           000013  1271 Fcommon$__xinit_ANIMATION_TICK_SPEED$0_0$0 == .
      000013                       1272 __xinit__ANIMATION_TICK_SPEED:
      000013 3C                    1273 	.db #0x3c	; 60
                           000014  1274 Fcommon$__xinit_MUSIC_TOGGLE$0_0$0 == .
      000014                       1275 __xinit__MUSIC_TOGGLE:
      000014 00                    1276 	.db #0x00	; 0
                           000015  1277 Fcommon$__xinit_RENDER_TARGET$0_0$0 == .
      000015                       1278 __xinit__RENDER_TARGET:
      000015 00                    1279 	.db #0x00	; 0
                           000016  1280 Fcommon$__xinit_BANK_BACKUP$0_0$0 == .
      000016                       1281 __xinit__BANK_BACKUP:
      000016 01                    1282 	.db #0x01	; 1
                           000017  1283 Fcommon$__xinit_BLANK_SCREEN_MAP$0_0$0 == .
      000017                       1284 __xinit__BLANK_SCREEN_MAP:
      000017 20                    1285 	.db #0x20	; 32
      000018 20                    1286 	.db #0x20	; 32
      000019 20                    1287 	.db #0x20	; 32
      00001A 20                    1288 	.db #0x20	; 32
      00001B 20                    1289 	.db #0x20	; 32
      00001C 20                    1290 	.db #0x20	; 32
      00001D 20                    1291 	.db #0x20	; 32
      00001E 20                    1292 	.db #0x20	; 32
      00001F 20                    1293 	.db #0x20	; 32
      000020 20                    1294 	.db #0x20	; 32
      000021 20                    1295 	.db #0x20	; 32
      000022 20                    1296 	.db #0x20	; 32
      000023 20                    1297 	.db #0x20	; 32
      000024 20                    1298 	.db #0x20	; 32
      000025 20                    1299 	.db #0x20	; 32
      000026 20                    1300 	.db #0x20	; 32
      000027 20                    1301 	.db #0x20	; 32
      000028 20                    1302 	.db #0x20	; 32
      000029 20                    1303 	.db #0x20	; 32
      00002A 20                    1304 	.db #0x20	; 32
      00002B 20                    1305 	.db #0x20	; 32
      00002C 20                    1306 	.db #0x20	; 32
      00002D 20                    1307 	.db #0x20	; 32
      00002E 20                    1308 	.db #0x20	; 32
      00002F 20                    1309 	.db #0x20	; 32
      000030 20                    1310 	.db #0x20	; 32
      000031 20                    1311 	.db #0x20	; 32
      000032 20                    1312 	.db #0x20	; 32
      000033 20                    1313 	.db #0x20	; 32
      000034 20                    1314 	.db #0x20	; 32
      000035 20                    1315 	.db #0x20	; 32
      000036 20                    1316 	.db #0x20	; 32
      000037 20                    1317 	.db #0x20	; 32
      000038 20                    1318 	.db #0x20	; 32
      000039 20                    1319 	.db #0x20	; 32
      00003A 20                    1320 	.db #0x20	; 32
      00003B 20                    1321 	.db #0x20	; 32
      00003C 20                    1322 	.db #0x20	; 32
      00003D 20                    1323 	.db #0x20	; 32
      00003E 20                    1324 	.db #0x20	; 32
      00003F 20                    1325 	.db #0x20	; 32
      000040 20                    1326 	.db #0x20	; 32
      000041 20                    1327 	.db #0x20	; 32
      000042 20                    1328 	.db #0x20	; 32
      000043 20                    1329 	.db #0x20	; 32
      000044 20                    1330 	.db #0x20	; 32
      000045 20                    1331 	.db #0x20	; 32
      000046 20                    1332 	.db #0x20	; 32
      000047 20                    1333 	.db #0x20	; 32
      000048 20                    1334 	.db #0x20	; 32
      000049 20                    1335 	.db #0x20	; 32
      00004A 20                    1336 	.db #0x20	; 32
      00004B 20                    1337 	.db #0x20	; 32
      00004C 20                    1338 	.db #0x20	; 32
      00004D 20                    1339 	.db #0x20	; 32
      00004E 20                    1340 	.db #0x20	; 32
      00004F 20                    1341 	.db #0x20	; 32
      000050 20                    1342 	.db #0x20	; 32
      000051 20                    1343 	.db #0x20	; 32
      000052 20                    1344 	.db #0x20	; 32
      000053 20                    1345 	.db #0x20	; 32
      000054 20                    1346 	.db #0x20	; 32
      000055 20                    1347 	.db #0x20	; 32
      000056 20                    1348 	.db #0x20	; 32
      000057 20                    1349 	.db #0x20	; 32
      000058 20                    1350 	.db #0x20	; 32
      000059 20                    1351 	.db #0x20	; 32
      00005A 20                    1352 	.db #0x20	; 32
      00005B 20                    1353 	.db #0x20	; 32
      00005C 20                    1354 	.db #0x20	; 32
      00005D 20                    1355 	.db #0x20	; 32
      00005E 20                    1356 	.db #0x20	; 32
      00005F 20                    1357 	.db #0x20	; 32
      000060 20                    1358 	.db #0x20	; 32
      000061 20                    1359 	.db #0x20	; 32
      000062 20                    1360 	.db #0x20	; 32
      000063 20                    1361 	.db #0x20	; 32
      000064 20                    1362 	.db #0x20	; 32
      000065 20                    1363 	.db #0x20	; 32
      000066 20                    1364 	.db #0x20	; 32
      000067 20                    1365 	.db #0x20	; 32
      000068 20                    1366 	.db #0x20	; 32
      000069 20                    1367 	.db #0x20	; 32
      00006A 20                    1368 	.db #0x20	; 32
      00006B 20                    1369 	.db #0x20	; 32
      00006C 20                    1370 	.db #0x20	; 32
      00006D 20                    1371 	.db #0x20	; 32
      00006E 20                    1372 	.db #0x20	; 32
      00006F 20                    1373 	.db #0x20	; 32
      000070 20                    1374 	.db #0x20	; 32
      000071 20                    1375 	.db #0x20	; 32
      000072 20                    1376 	.db #0x20	; 32
      000073 20                    1377 	.db #0x20	; 32
      000074 20                    1378 	.db #0x20	; 32
      000075 20                    1379 	.db #0x20	; 32
      000076 20                    1380 	.db #0x20	; 32
      000077 20                    1381 	.db #0x20	; 32
      000078 20                    1382 	.db #0x20	; 32
      000079 20                    1383 	.db #0x20	; 32
      00007A 20                    1384 	.db #0x20	; 32
      00007B 20                    1385 	.db #0x20	; 32
      00007C 20                    1386 	.db #0x20	; 32
      00007D 20                    1387 	.db #0x20	; 32
      00007E 20                    1388 	.db #0x20	; 32
      00007F 20                    1389 	.db #0x20	; 32
      000080 20                    1390 	.db #0x20	; 32
      000081 20                    1391 	.db #0x20	; 32
      000082 20                    1392 	.db #0x20	; 32
      000083 20                    1393 	.db #0x20	; 32
      000084 20                    1394 	.db #0x20	; 32
      000085 20                    1395 	.db #0x20	; 32
      000086 20                    1396 	.db #0x20	; 32
      000087 20                    1397 	.db #0x20	; 32
      000088 20                    1398 	.db #0x20	; 32
      000089 20                    1399 	.db #0x20	; 32
      00008A 20                    1400 	.db #0x20	; 32
      00008B 20                    1401 	.db #0x20	; 32
      00008C 20                    1402 	.db #0x20	; 32
      00008D 20                    1403 	.db #0x20	; 32
      00008E 20                    1404 	.db #0x20	; 32
      00008F 20                    1405 	.db #0x20	; 32
      000090 20                    1406 	.db #0x20	; 32
      000091 20                    1407 	.db #0x20	; 32
      000092 20                    1408 	.db #0x20	; 32
      000093 20                    1409 	.db #0x20	; 32
      000094 20                    1410 	.db #0x20	; 32
      000095 20                    1411 	.db #0x20	; 32
      000096 20                    1412 	.db #0x20	; 32
      000097 20                    1413 	.db #0x20	; 32
      000098 20                    1414 	.db #0x20	; 32
      000099 20                    1415 	.db #0x20	; 32
      00009A 20                    1416 	.db #0x20	; 32
      00009B 20                    1417 	.db #0x20	; 32
      00009C 20                    1418 	.db #0x20	; 32
      00009D 20                    1419 	.db #0x20	; 32
      00009E 20                    1420 	.db #0x20	; 32
      00009F 20                    1421 	.db #0x20	; 32
      0000A0 20                    1422 	.db #0x20	; 32
      0000A1 20                    1423 	.db #0x20	; 32
      0000A2 20                    1424 	.db #0x20	; 32
      0000A3 20                    1425 	.db #0x20	; 32
      0000A4 20                    1426 	.db #0x20	; 32
      0000A5 20                    1427 	.db #0x20	; 32
      0000A6 20                    1428 	.db #0x20	; 32
      0000A7 20                    1429 	.db #0x20	; 32
      0000A8 20                    1430 	.db #0x20	; 32
      0000A9 20                    1431 	.db #0x20	; 32
      0000AA 20                    1432 	.db #0x20	; 32
      0000AB 20                    1433 	.db #0x20	; 32
      0000AC 20                    1434 	.db #0x20	; 32
      0000AD 20                    1435 	.db #0x20	; 32
      0000AE 20                    1436 	.db #0x20	; 32
      0000AF 20                    1437 	.db #0x20	; 32
      0000B0 20                    1438 	.db #0x20	; 32
      0000B1 20                    1439 	.db #0x20	; 32
      0000B2 20                    1440 	.db #0x20	; 32
      0000B3 20                    1441 	.db #0x20	; 32
      0000B4 20                    1442 	.db #0x20	; 32
      0000B5 20                    1443 	.db #0x20	; 32
      0000B6 20                    1444 	.db #0x20	; 32
      0000B7 20                    1445 	.db #0x20	; 32
      0000B8 20                    1446 	.db #0x20	; 32
      0000B9 20                    1447 	.db #0x20	; 32
      0000BA 20                    1448 	.db #0x20	; 32
      0000BB 20                    1449 	.db #0x20	; 32
      0000BC 20                    1450 	.db #0x20	; 32
      0000BD 20                    1451 	.db #0x20	; 32
      0000BE 20                    1452 	.db #0x20	; 32
      0000BF 20                    1453 	.db #0x20	; 32
      0000C0 20                    1454 	.db #0x20	; 32
      0000C1 20                    1455 	.db #0x20	; 32
      0000C2 20                    1456 	.db #0x20	; 32
      0000C3 20                    1457 	.db #0x20	; 32
      0000C4 20                    1458 	.db #0x20	; 32
      0000C5 20                    1459 	.db #0x20	; 32
      0000C6 20                    1460 	.db #0x20	; 32
      0000C7 20                    1461 	.db #0x20	; 32
      0000C8 20                    1462 	.db #0x20	; 32
      0000C9 20                    1463 	.db #0x20	; 32
      0000CA 20                    1464 	.db #0x20	; 32
      0000CB 20                    1465 	.db #0x20	; 32
      0000CC 20                    1466 	.db #0x20	; 32
      0000CD 20                    1467 	.db #0x20	; 32
      0000CE 20                    1468 	.db #0x20	; 32
      0000CF 20                    1469 	.db #0x20	; 32
      0000D0 20                    1470 	.db #0x20	; 32
      0000D1 20                    1471 	.db #0x20	; 32
      0000D2 20                    1472 	.db #0x20	; 32
      0000D3 20                    1473 	.db #0x20	; 32
      0000D4 20                    1474 	.db #0x20	; 32
      0000D5 20                    1475 	.db #0x20	; 32
      0000D6 20                    1476 	.db #0x20	; 32
      0000D7 20                    1477 	.db #0x20	; 32
      0000D8 20                    1478 	.db #0x20	; 32
      0000D9 20                    1479 	.db #0x20	; 32
      0000DA 20                    1480 	.db #0x20	; 32
      0000DB 20                    1481 	.db #0x20	; 32
      0000DC 20                    1482 	.db #0x20	; 32
      0000DD 20                    1483 	.db #0x20	; 32
      0000DE 20                    1484 	.db #0x20	; 32
      0000DF 20                    1485 	.db #0x20	; 32
      0000E0 20                    1486 	.db #0x20	; 32
      0000E1 20                    1487 	.db #0x20	; 32
      0000E2 20                    1488 	.db #0x20	; 32
      0000E3 20                    1489 	.db #0x20	; 32
      0000E4 20                    1490 	.db #0x20	; 32
      0000E5 20                    1491 	.db #0x20	; 32
      0000E6 20                    1492 	.db #0x20	; 32
      0000E7 20                    1493 	.db #0x20	; 32
      0000E8 20                    1494 	.db #0x20	; 32
      0000E9 20                    1495 	.db #0x20	; 32
      0000EA 20                    1496 	.db #0x20	; 32
      0000EB 20                    1497 	.db #0x20	; 32
      0000EC 20                    1498 	.db #0x20	; 32
      0000ED 20                    1499 	.db #0x20	; 32
      0000EE 20                    1500 	.db #0x20	; 32
      0000EF 20                    1501 	.db #0x20	; 32
      0000F0 20                    1502 	.db #0x20	; 32
      0000F1 20                    1503 	.db #0x20	; 32
      0000F2 20                    1504 	.db #0x20	; 32
      0000F3 20                    1505 	.db #0x20	; 32
      0000F4 20                    1506 	.db #0x20	; 32
      0000F5 20                    1507 	.db #0x20	; 32
      0000F6 20                    1508 	.db #0x20	; 32
      0000F7 20                    1509 	.db #0x20	; 32
      0000F8 20                    1510 	.db #0x20	; 32
      0000F9 20                    1511 	.db #0x20	; 32
      0000FA 20                    1512 	.db #0x20	; 32
      0000FB 20                    1513 	.db #0x20	; 32
      0000FC 20                    1514 	.db #0x20	; 32
      0000FD 20                    1515 	.db #0x20	; 32
      0000FE 20                    1516 	.db #0x20	; 32
      0000FF 20                    1517 	.db #0x20	; 32
      000100 20                    1518 	.db #0x20	; 32
      000101 20                    1519 	.db #0x20	; 32
      000102 20                    1520 	.db #0x20	; 32
      000103 20                    1521 	.db #0x20	; 32
      000104 20                    1522 	.db #0x20	; 32
      000105 20                    1523 	.db #0x20	; 32
      000106 20                    1524 	.db #0x20	; 32
      000107 20                    1525 	.db #0x20	; 32
      000108 20                    1526 	.db #0x20	; 32
      000109 20                    1527 	.db #0x20	; 32
      00010A 20                    1528 	.db #0x20	; 32
      00010B 20                    1529 	.db #0x20	; 32
      00010C 20                    1530 	.db #0x20	; 32
      00010D 20                    1531 	.db #0x20	; 32
      00010E 20                    1532 	.db #0x20	; 32
      00010F 20                    1533 	.db #0x20	; 32
      000110 20                    1534 	.db #0x20	; 32
      000111 20                    1535 	.db #0x20	; 32
      000112 20                    1536 	.db #0x20	; 32
      000113 20                    1537 	.db #0x20	; 32
      000114 20                    1538 	.db #0x20	; 32
      000115 20                    1539 	.db #0x20	; 32
      000116 20                    1540 	.db #0x20	; 32
      000117 20                    1541 	.db #0x20	; 32
      000118 20                    1542 	.db #0x20	; 32
      000119 20                    1543 	.db #0x20	; 32
      00011A 20                    1544 	.db #0x20	; 32
      00011B 20                    1545 	.db #0x20	; 32
      00011C 20                    1546 	.db #0x20	; 32
      00011D 20                    1547 	.db #0x20	; 32
      00011E 20                    1548 	.db #0x20	; 32
      00011F 20                    1549 	.db #0x20	; 32
      000120 20                    1550 	.db #0x20	; 32
      000121 20                    1551 	.db #0x20	; 32
      000122 20                    1552 	.db #0x20	; 32
      000123 20                    1553 	.db #0x20	; 32
      000124 20                    1554 	.db #0x20	; 32
      000125 20                    1555 	.db #0x20	; 32
      000126 20                    1556 	.db #0x20	; 32
      000127 20                    1557 	.db #0x20	; 32
      000128 20                    1558 	.db #0x20	; 32
      000129 20                    1559 	.db #0x20	; 32
      00012A 20                    1560 	.db #0x20	; 32
      00012B 20                    1561 	.db #0x20	; 32
      00012C 20                    1562 	.db #0x20	; 32
      00012D 20                    1563 	.db #0x20	; 32
      00012E 20                    1564 	.db #0x20	; 32
      00012F 20                    1565 	.db #0x20	; 32
      000130 20                    1566 	.db #0x20	; 32
      000131 20                    1567 	.db #0x20	; 32
      000132 20                    1568 	.db #0x20	; 32
      000133 20                    1569 	.db #0x20	; 32
      000134 20                    1570 	.db #0x20	; 32
      000135 20                    1571 	.db #0x20	; 32
      000136 20                    1572 	.db #0x20	; 32
      000137 20                    1573 	.db #0x20	; 32
      000138 20                    1574 	.db #0x20	; 32
      000139 20                    1575 	.db #0x20	; 32
      00013A 20                    1576 	.db #0x20	; 32
      00013B 20                    1577 	.db #0x20	; 32
      00013C 20                    1578 	.db #0x20	; 32
      00013D 20                    1579 	.db #0x20	; 32
      00013E 20                    1580 	.db #0x20	; 32
      00013F 20                    1581 	.db #0x20	; 32
      000140 20                    1582 	.db #0x20	; 32
      000141 20                    1583 	.db #0x20	; 32
      000142 20                    1584 	.db #0x20	; 32
      000143 20                    1585 	.db #0x20	; 32
      000144 20                    1586 	.db #0x20	; 32
      000145 20                    1587 	.db #0x20	; 32
      000146 20                    1588 	.db #0x20	; 32
      000147 20                    1589 	.db #0x20	; 32
      000148 20                    1590 	.db #0x20	; 32
      000149 20                    1591 	.db #0x20	; 32
      00014A 20                    1592 	.db #0x20	; 32
      00014B 20                    1593 	.db #0x20	; 32
      00014C 20                    1594 	.db #0x20	; 32
      00014D 20                    1595 	.db #0x20	; 32
      00014E 20                    1596 	.db #0x20	; 32
      00014F 20                    1597 	.db #0x20	; 32
      000150 20                    1598 	.db #0x20	; 32
      000151 20                    1599 	.db #0x20	; 32
      000152 20                    1600 	.db #0x20	; 32
      000153 20                    1601 	.db #0x20	; 32
      000154 20                    1602 	.db #0x20	; 32
      000155 20                    1603 	.db #0x20	; 32
      000156 20                    1604 	.db #0x20	; 32
      000157 20                    1605 	.db #0x20	; 32
      000158 20                    1606 	.db #0x20	; 32
      000159 20                    1607 	.db #0x20	; 32
      00015A 20                    1608 	.db #0x20	; 32
      00015B 20                    1609 	.db #0x20	; 32
      00015C 20                    1610 	.db #0x20	; 32
      00015D 20                    1611 	.db #0x20	; 32
      00015E 20                    1612 	.db #0x20	; 32
      00015F 20                    1613 	.db #0x20	; 32
      000160 20                    1614 	.db #0x20	; 32
      000161 20                    1615 	.db #0x20	; 32
      000162 20                    1616 	.db #0x20	; 32
      000163 20                    1617 	.db #0x20	; 32
      000164 20                    1618 	.db #0x20	; 32
      000165 20                    1619 	.db #0x20	; 32
      000166 20                    1620 	.db #0x20	; 32
      000167 20                    1621 	.db #0x20	; 32
      000168 20                    1622 	.db #0x20	; 32
      000169 20                    1623 	.db #0x20	; 32
      00016A 20                    1624 	.db #0x20	; 32
      00016B 20                    1625 	.db #0x20	; 32
      00016C 20                    1626 	.db #0x20	; 32
      00016D 20                    1627 	.db #0x20	; 32
      00016E 20                    1628 	.db #0x20	; 32
      00016F 20                    1629 	.db #0x20	; 32
      000170 20                    1630 	.db #0x20	; 32
      000171 20                    1631 	.db #0x20	; 32
      000172 20                    1632 	.db #0x20	; 32
      000173 20                    1633 	.db #0x20	; 32
      000174 20                    1634 	.db #0x20	; 32
      000175 20                    1635 	.db #0x20	; 32
      000176 20                    1636 	.db #0x20	; 32
      000177 20                    1637 	.db #0x20	; 32
      000178 20                    1638 	.db #0x20	; 32
      000179 20                    1639 	.db #0x20	; 32
      00017A 20                    1640 	.db #0x20	; 32
      00017B 20                    1641 	.db #0x20	; 32
      00017C 20                    1642 	.db #0x20	; 32
      00017D 20                    1643 	.db #0x20	; 32
      00017E 20                    1644 	.db #0x20	; 32
                                   1645 	.area _CABS (ABS)
